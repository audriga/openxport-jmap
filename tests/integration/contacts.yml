# Test contact API calls
# Requires on the test instance:
# * One contact with first name (ﾉ｀□´)ﾉ⌒┻━┻
# * One contact group
# * One shared addressbook with a contact with first name "Rumen"
---
- hosts: all:!roundcube_servers:!jscontact_mock_servers:!nextcloud_servers:!api_proxy_roundcube_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: Create test folder
      ansible.builtin.file:
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}"
        state: directory
        mode: '0755'
      delegate_to: 127.0.0.1

    - name: Get all Contacts for admin account
      uri:
        body: '{"using":["urn:ietf:params:jmap:contacts"],"methodCalls":[["Contact/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               contact_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "Contacts do not contain one with a first name that begins with (ﾉ｀□.\n{{ call_response.json }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[?firstName == `(ﾉ｀□´)ﾉ⌒┻━┻`]') | length == 0"
      failed_when: true

    - debug:
        msg: "Contacts contains Rumen.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[?firstName == `Rumen`]') | length > 0"
      failed_when: true

- hosts: horde_servers:vanilla_mock_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - debug:
        msg: "Contacts do not have an addressBookId.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[?addressBookId]') | length == 0"
      failed_when: true

# Sometimes helps with debugging
- hosts: horde_servers:vanilla_mock_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: Get all Contacts for normal account
      uri:
        body: '{"using":["urn:ietf:params:jmap:contacts"],"methodCalls":[["Contact/get", {"accountId":"{{ normal_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true  # TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ normal_pass }}"
        url_username: "{{ normal_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      tags:
        - never
        - normal_user

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               contact_get_normal.json"
      delegate_to: 127.0.0.1
      tags:
        - never
        - normal_user

- hosts: all:!roundcube_servers:!jscontact_mock_servers:!nextcloud_servers:!api_proxy_roundcube_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: Get all ContactGroups for admin account
      uri:
        body: '{"using":["urn:ietf:params:jmap:contacts"],"methodCalls":[["ContactGroup/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               contactgroup_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "ContactGroups do not have contactIds.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[*].contactIds') | length == 0"
      failed_when: true

- hosts: horde_servers:vanilla_mock_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: AddressBook calls
      uri:
        body: '{"using":["urn:ietf:params:jmap:contacts"],"methodCalls":[["AddressBook/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               addressbook_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "AddressBooks do not contain name property.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[*].name') | length == 0"
      failed_when: true
