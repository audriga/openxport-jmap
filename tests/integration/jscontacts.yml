# Test contact API calls
# Requires on the test instance:
# * One contact with a first name
---
- hosts: jscontact_mock_servers:roundcube_servers:!calendar_roundcube_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: Create test folder
      ansible.builtin.file:
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}"
        state: directory
        mode: '0755'
      delegate_to: 127.0.0.1

    - name: Get all Contacts in JSContact format for admin account
      uri:
        body: '{"using":["https://www.audriga.eu/jmap/jscontact/"],"methodCalls":[["Card/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               card_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "JSContact does not contain one with a full name.\n{{ call_response.json }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[?fullName]') | length == 0"
      failed_when: true

    - debug:
        msg: "Response contains Rumen from shared addressbook.\n{{ call_response.json }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[?fullName == `Rumen`]') | length > 0"
      failed_when: true
    
    - name: Get all CardGroups in JSContact format for admin account
      uri:
        body: '{"using":["https://www.audriga.eu/jmap/jscontact/"],"methodCalls":[["CardGroup/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               cardgroup_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "CardGroups do not have member IDs.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[*].members') | length == 0"
      failed_when: true

- hosts: roundcube_servers:!calendar_roundcube_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: Delete unknown contact
      uri:
        body: '{"using":["https://www.audriga.eu/jmap/jscontact/"],"methodCalls":[["Card/set", {"accountId":"{{ admin_user }}", "destroy":["9999999"]}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               card_set_destroy.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "Contact 999999 not seen as invalid.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('notDestroyed.\"9999999\".type')  != 'invalidProperties'"
      failed_when: true

- hosts: jscontact_mock_servers
  ignore_errors: true
  gather_facts: false
  tasks:
    - name: AddressBook calls
      uri:
        body: '{"using":["https://www.audriga.eu/jmap/jscontact/"],"methodCalls":[["AddressBook/get", {"accountId":"{{ admin_user }}"}, "0"]]}'
        body_format: json
        force_basic_auth: true #TODO once we return correct 401 we can remove this
        url: "{{ local_address }}"
        url_password: "{{ admin_pass }}"
        url_username: "{{ admin_user }}"
        method: POST
        return_content: true
        validate_certs: false
      delegate_to: 127.0.0.1
      register: call_response

    - name: Store reply under /tmp/
      copy:
        content: "{{ call_response.content }}"
        dest: "/tmp/openxport_ansible_output/{{ inventory_hostname }}/\
               addressbook_get.json"
      delegate_to: 127.0.0.1

    - debug:
        msg: "AddressBooks do not contain name property.\n{{ call_response.json | to_yaml }}"
      when: "call_response.json.methodResponses[0][1] | community.general.json_query('list[*].name') | length == 0"
      failed_when: true
